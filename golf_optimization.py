# ------------------------------------------------------------- ## ---  --- ## ---           Created on Thu Apr 20 09:59:27 2023         --- ## ------------------------------------------------------------- ##%%import pandas as pdimport numpy as npimport mathimport osimport itertools#%%os.chdir("/Users/andy/Documents/Golf_Hole_Optimization")#%%holes = pd.read_csv("holes.csv")holes.head()holes.tail()#%%#First find all combinations of choosing 6 holes of 18 holesfirst_choose6 = list(itertools.combinations(list(range(0,17)), 6))#With 12 holes remiaining, find all combinations of shoosing 6 holes of remaining 12twelve_choose6 = list(itertools.combinations(list(range(0,11)), 6))#%%#Test some stuff outfirst6 = (0,1,2,3,4,5)print(first6)list(first6)test = holes.iloc[list(first6), 0]testremaining12 = holes.drop(first6)remaining12 = remaining12.reset_index(drop=True)remaining12#%%#Test some stuff outgold_sum = 0for i in first6:    gold_yards = holes.iloc[i,3]    gold_sum = gold_sum + gold_yards    gold_sum#%%#The "meat and potatoes" loop. Create all combinations and sum up the yardages.#There should be 1.7billion combinationsgold_holes = []gold_sums = []blue_holes = []blue_sums = []black_holes = []black_sums = []count = 0 #Loop Counteriterations = 5 #For testing purposesfor i in first_choose6:    gold_sum = 0    for h in i:        gold_yards = holes.iloc[h,1]        gold_sum = gold_sum + gold_yards    remaining12 = holes.drop(list(i))    remaining12 = remaining12.reset_index(drop=True)    for j in twelve_choose6:        gold_holes.append(list(holes.iloc[(list(i),0)]))        gold_sums.append(gold_sum)        blue_holes.append(list(remaining12.iloc[(list(j),0)]))                remaining_six = remaining12.drop(list(j))        remaining_six = remaining_six.reset_index(drop=True)                black_holes.append(list(remaining_six.iloc[0:6,0]))                blue_sum = 0        for b in j:            blue_yards = remaining12.iloc[b,2]            blue_sum = blue_sum + blue_yards        blue_sums.append(blue_sum)                        black_sum = 0        for c in list(remaining_six.iloc[0:6,3]):            black_yards = c            black_sum = black_sum + black_yards        black_sums.append(black_sum)                count += 1                #if count >= iterations:            #break        if count % 1000000 == 0:            print(count)                #print("gold: " + str(list(holes.iloc[(list(i),0)])))        #print("blue: " + str(list(remaining12.iloc[(list(j),0)])))        #print("black: " + str(list(remaining_six.iloc[0:5,0])))          #%%        #Make a Data Framedata = {"Gold_Holes":gold_holes, "Gold_Sum":gold_sums,        "Blue_Holes":blue_holes, "Blue_Sum":blue_sums,        "Black_Holes":black_holes, "Black_Sum":black_sums        }df = pd.DataFrame(data)#Make Total Columndf["Total"] = df["Gold_Sum"]+df["Blue_Sum"]+df["Black_Sum"]#%%#Sort and determine the lowest total yardagesdf = df.sort_values(["Total"])df#%%df.iloc[0,:]        